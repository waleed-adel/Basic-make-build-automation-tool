include config.mk

###############################################################################
#                                  Variables                                  #
###############################################################################
allObjs = $(allSrcs:.c=.o)
allDeps = $(allSrcs:.c=.d)

# variable that contains all files generated from makefile
allFilesGenerated = $(allObjs) $(allDeps) $(FinalTargetName)
# variable that contains the number of all the files generated by makefile
numberOfFilesGenerated = $(words $(allFilesGenerated))

########################### Targeted Variables ################################
$(FinalTargetName) : CFLAG = 
$(allObjs): CFLAG = -c
$(allDeps): CFLAG = -MM


###############################################################################
#                                   Targets                                   #
###############################################################################

$(FinalTargetName) : $(allObjs) 
	@$(CC) $(CFLAG) $^ -o $@ 
	@cmd /C progress.bat
	@cmd /C progress.py $(numberOfFilesGenerated)
	
# the below will act as if it's a loop, looping on $(allObjs) elements
# %.o : %.c means that anything .o is to be replaced with .c 
# Driver_%.c : Driver_%.o is another example
$(allObjs) : %.o : %.c 
	@$(CC) $(CFLAG) $< -o $@
	@cmd /C progress.bat
	@cmd /C progress.py $(numberOfFilesGenerated)
	
#	this is called extended prerequisites
# this means that object file will also depend on header file 
# $(fileObj1) : $(fileHeader1) 

# | Dependencies means that $(allDeps) depends on another target called Dependencies
# if there is no directory called Dependencies it will just copy the last .d file contents
# to a file called Dependencies
# at copy command we can suppress the output of the command by redirection stdout to NUL
$(allDeps) : %.d : %.c | Dependencies
	@$(CC) $(CFLAG) $< -o $@
	@copy /y $@ Dependencies > NUL
	@cmd /C progress.bat
	@cmd /C progress.py $(numberOfFilesGenerated)
	
	
# this target is reponsible for creating the Dependencies directory
Dependencies:
	@mkdir $@


########################### PHONY targets ################################

# list of phony targets to be performed as an action whithout checking if there 
# is a file that exists in the same directory of makefile
.PHONY: clean link onlyCompile depend all

# clean 
# Description: deletes all generated files   
# rmdir => /S deletes directory with it's contents 
#          (normally you can't delete a directory that's not empty) 
#       => /Q quite mode: deletes without asking approval from user 
# @echo 0 > progress.txt => resetting the counter value in progress.txt to 0
clean: 
	@del /Q $(FinalTargetName) $(allObjs) $(allDeps) 
	@rmdir /S /Q Dependencies
	@echo 0 > progress.txt

# link 
# Description: link all object files(if exists) to generate FinalTargetName 	
link:
	@$(CC) $(CFLAG) $(allObjs) -o $(FinalTargetName)
	@cmd /C progress.bat
	@cmd /C progress.py $(numberOfFilesGenerated)
	
# onlyCompile 
# Description: generate all object files from sources files 	
onlyCompile: $(allObjs)

# depend
# Description: generate .d files that contain all dependencies for each file  
depend: $(allDeps)

# all 
# Description: generate all files including dependencies and FinalTargetName 
# calling make with $(MAKE) and pass to it the final target name
# recursion call (make calls itself again inside make)
# @echo 0 > progress.txt => resetting the counter value in progress.txt to 0
all: $(allDeps) 
	$(MAKE) $(FinalTargetName) 
#all: $(allDeps) $(FinalTargetName) => this also can be used instead of the recursion 